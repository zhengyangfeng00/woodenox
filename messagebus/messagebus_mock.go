// Code generated by MockGen. DO NOT EDIT.
// Source: messagebus.go

// Package messagebus is a generated GoMock package.
package messagebus

import (
	gomock "github.com/golang/mock/gomock"
	iterator "github.com/zhengyangfeng00/woodenox/iterator"
	stream "github.com/zhengyangfeng00/woodenox/stream"
	reflect "reflect"
)

// MockMessageBus is a mock of MessageBus interface
type MockMessageBus struct {
	ctrl     *gomock.Controller
	recorder *MockMessageBusMockRecorder
}

// MockMessageBusMockRecorder is the mock recorder for MockMessageBus
type MockMessageBusMockRecorder struct {
	mock *MockMessageBus
}

// NewMockMessageBus creates a new mock instance
func NewMockMessageBus(ctrl *gomock.Controller) *MockMessageBus {
	mock := &MockMessageBus{ctrl: ctrl}
	mock.recorder = &MockMessageBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageBus) EXPECT() *MockMessageBusMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockMessageBus) Subscribe(streamName string, opts ...stream.SubscribeOpt) (iterator.Iterator, stream.UnsubFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{streamName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(iterator.Iterator)
	ret1, _ := ret[1].(stream.UnsubFunc)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockMessageBusMockRecorder) Subscribe(streamName interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{streamName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockMessageBus)(nil).Subscribe), varargs...)
}

// ProduceTo mocks base method
func (m *MockMessageBus) ProduceTo(stream string, opts ...stream.ProduceOpt) Output {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProduceTo", varargs...)
	ret0, _ := ret[0].(Output)
	return ret0
}

// ProduceTo indicates an expected call of ProduceTo
func (mr *MockMessageBusMockRecorder) ProduceTo(stream interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceTo", reflect.TypeOf((*MockMessageBus)(nil).ProduceTo), varargs...)
}
