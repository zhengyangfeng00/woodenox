// Code generated by MockGen. DO NOT EDIT.
// Source: iter.go

// Package stream is a generated GoMock package.
package stream

import (
	gomock "github.com/golang/mock/gomock"
	iterator "github.com/zhengyangfeng00/woodenox/iterator"
	reflect "reflect"
)

// Mockstream is a mock of stream interface
type Mockstream struct {
	ctrl     *gomock.Controller
	recorder *MockstreamMockRecorder
}

// MockstreamMockRecorder is the mock recorder for Mockstream
type MockstreamMockRecorder struct {
	mock *Mockstream
}

// NewMockstream creates a new mock instance
func NewMockstream(ctrl *gomock.Controller) *Mockstream {
	mock := &Mockstream{ctrl: ctrl}
	mock.recorder = &MockstreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockstream) EXPECT() *MockstreamMockRecorder {
	return m.recorder
}

// Accept mocks base method
func (m *Mockstream) Accept(item iterator.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Accept indicates an expected call of Accept
func (mr *MockstreamMockRecorder) Accept(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*Mockstream)(nil).Accept), item)
}

// next mocks base method
func (m *Mockstream) next(it *streamIter) (iterator.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "next", it)
	ret0, _ := ret[0].(iterator.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// next indicates an expected call of next
func (mr *MockstreamMockRecorder) next(it interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "next", reflect.TypeOf((*Mockstream)(nil).next), it)
}
