// Code generated by MockGen. DO NOT EDIT.
// Source: stream.go

// Package stream is a generated GoMock package.
package stream

import (
	gomock "github.com/golang/mock/gomock"
	iterator "github.com/zhengyangfeng00/woodenox/iterator"
	reflect "reflect"
)

// MockStream is a mock of Stream interface
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// NewSubscriber mocks base method
func (m *MockStream) NewSubscriber(opts ...SubscribeOpt) (iterator.Iterator, UnsubFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewSubscriber", varargs...)
	ret0, _ := ret[0].(iterator.Iterator)
	ret1, _ := ret[1].(UnsubFunc)
	return ret0, ret1
}

// NewSubscriber indicates an expected call of NewSubscriber
func (mr *MockStreamMockRecorder) NewSubscriber(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSubscriber", reflect.TypeOf((*MockStream)(nil).NewSubscriber), opts...)
}

// Accept mocks base method
func (m *MockStream) Accept(item iterator.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Accept indicates an expected call of Accept
func (mr *MockStreamMockRecorder) Accept(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockStream)(nil).Accept), item)
}

// Run mocks base method
func (m *MockStream) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run
func (mr *MockStreamMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStream)(nil).Run))
}

// Stop mocks base method
func (m *MockStream) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockStreamMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStream)(nil).Stop))
}
